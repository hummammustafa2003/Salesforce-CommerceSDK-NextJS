Here's how you could design a review system for 1 million products where reviews are crucial:

**Data Model:**

- **Entities:**
    - **User:** Stores user information (ID, name, email, etc.)
    - **Product:** Stores product details (ID, name, description, category, etc.)
    - **Review:** Stores review content (ID, user ID, product ID, rating, text, timestamp, etc.)
- **Relationships:**
    - A User can write many Reviews.
    - A Product can have many Reviews.
    - A Review is written by one User and is for one Product.

**Scalability Considerations:**

- **Database:**
    - Use a distributed database solution like NoSQL (e.g., Cassandra, MongoDB) or sharded relational databases like MySQL or PostgreSQL to handle massive data volumes.
    - Consider denormalizing some data (e.g., storing average rating in the Product table) for faster reads.
- **Indexing:**
    - Implement appropriate indexes on frequently queried fields (e.g., product ID, user ID, rating) to optimize search performance.
- **Caching:**
    - Cache frequently accessed data (e.g., top-rated products, recent reviews) to reduce database load.
- **Asynchronous Processing:**
    - Use asynchronous tasks for review moderation, notification generation, or recommendation updates to avoid impacting user experience.

**Review Management:**

- **Moderation:**
    - Implement a review moderation system to ensure content quality and prevent spam.
    - This could involve automated filtering based on keywords or manual review by moderators.
- **Reputation Management:**
    - Develop a system to handle potentially negative reviews and encourage constructive feedback.
    - Allow users to flag reviews for inappropriate content and provide businesses with tools to respond to reviews.

**Additional Features:**

- **Ratings Breakdown:** Allow users to break down ratings by specific aspects (e.g., quality, value, ease of use).
- **Sorting and Filtering:** Allow users to sort reviews by various criteria (e.g., most recent, highest rated, helpfulness).
- **Helpful Reviews:** Provide a way for users to upvote helpful reviews for better filtering.
- **Review Incentives:** Consider incentivizing users to write comprehensive and insightful reviews (e.g., points, badges).

**Advanced Techniques:**

- **Natural Language Processing (NLP):** Use NLP to analyze review text and automatically extract sentiment (positive, negative, neutral). 
- **Machine Learning:**  Train recommendation models based on user reviews and purchase history to suggest relevant products to users.

**Choosing the Right Technology:**

The specific technologies for implementing your model will depend on your budget, development team expertise, and existing infrastructure. Consider using cloud platforms like AWS, Google Cloud Platform, or Azure for their scalability and managed services. 

**Remember:**

- **Focus on User Experience:** Design the review system to be user-friendly and encourage high-quality reviews.
- **Prioritize Trust and Transparency:** Implement robust moderation and reputation management strategies.
- **Leverage Data for Insights:** Utilize review data to understand user preferences and improve products.

By carefully designing your review system and leveraging various technologies, you can create a valuable resource for users and gain valuable insights from their feedback, even with a vast product catalog.